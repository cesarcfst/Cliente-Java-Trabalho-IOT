/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iot;

import com.google.gson.Gson;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.websocket.Session;
import javax.websocket.ClientEndpoint;
import javax.websocket.ContainerProvider;
import javax.websocket.DeploymentException;
import javax.websocket.OnMessage;
import javax.websocket.Session;
import javax.websocket.WebSocketContainer;
import java.net.URI;

/**
 *
 * @author cesar
 */
public class JanelaDeTest extends javax.swing.JFrame {
    /**
     * listaLocal. Variável responsável por guardar o dados enquando meu programa estiver executando.
     */
    static List<DadosCalendar> listaLocal;
    
    DefaultListModel dlm;

    SerializacaoCalendar serializador;
    List<DadosCalendar> listaDadosSerializados;
    DadosCalendar dadosCalendar;
    DadosCalendar proxDado;
    GerenciadorCalendar gerenciadorCalendar;
    Thread thread;

    private Session session;
    private static Gson gson;

    /**
     * Creates new form JanelaDeTest
     */
    public JanelaDeTest() {
        gerenciadorCalendar = new GerenciadorCalendar();
        listaLocal = new ArrayList<DadosCalendar>();
        iniciarListaLocal();
        initComponents();
        dlm = new DefaultListModel();

        serializador = new SerializacaoCalendar();
        listaDadosSerializados = new ArrayList<DadosCalendar>();
        //serializador.inicializarAgendamento(listaDadosSerializados);//verificar depois

        dadosCalendar = new DadosCalendar();
        dadosCalendar.setAgendamento(new ArrayList<DadosCalendar>());
        proxDado = new DadosCalendar();
        proxDado.setAgendamento(new ArrayList<DadosCalendar>());
        

        gson = new Gson();
        conectarComWebSocket();
        alterarSituacaoDaLista();
        proxDado = pegarDadosParaIniciarPrograma();
        threadDoAgendamento(proxDado);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        campoData = new javax.swing.JTextField();
        campoHorario = new javax.swing.JTextField();
        campoComboBoxLuzDaSala = new javax.swing.JComboBox();
        campoComboBoxVentilador = new javax.swing.JComboBox();
        campoComboBoxTv = new javax.swing.JComboBox();
        campoComboBoxLuzDoQuarto = new javax.swing.JComboBox();
        botaoAdd = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaDeTarefas = new javax.swing.JList();
        btnMostrarDados = new javax.swing.JButton();
        btnExcluirTodos = new javax.swing.JButton();
        botaoOrdenarList = new javax.swing.JButton();
        btnProxDado = new javax.swing.JButton();
        btnAtualizarSituacaoDaLista = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setText("DATA");

        jLabel2.setText("HORÁRIO");

        jLabel3.setText("LUZ DA SALA");

        jLabel4.setText("VENTILADOR");

        jLabel5.setText("TV");

        jLabel6.setText("LULZ DO QUARTO");

        campoComboBoxLuzDaSala.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "L", "D" }));

        campoComboBoxVentilador.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "L", "D" }));

        campoComboBoxTv.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "L", "D" }));

        campoComboBoxLuzDoQuarto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "L", "D" }));

        botaoAdd.setText("ADD");
        botaoAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAddActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(listaDeTarefas);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        btnMostrarDados.setText("MOSTRAR DADOS SALVOS");
        btnMostrarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarDadosActionPerformed(evt);
            }
        });

        btnExcluirTodos.setText("EXCLUIR TODOS");
        btnExcluirTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirTodosActionPerformed(evt);
            }
        });

        botaoOrdenarList.setText("ORDENAR LISTA");
        botaoOrdenarList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoOrdenarListActionPerformed(evt);
            }
        });

        btnProxDado.setText("MOSTRAR PROXIMO A EXECUTAR");
        btnProxDado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProxDadoActionPerformed(evt);
            }
        });

        btnAtualizarSituacaoDaLista.setText("ATUALIZAR SITUAÇÃO DA LISTA");
        btnAtualizarSituacaoDaLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarSituacaoDaListaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botaoAdd)
                                .addGap(41, 41, 41)
                                .addComponent(btnMostrarDados))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(campoComboBoxLuzDoQuarto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(campoComboBoxTv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(campoComboBoxVentilador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(campoComboBoxLuzDaSala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(campoData, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(campoHorario, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnExcluirTodos)
                        .addGap(68, 68, 68)
                        .addComponent(botaoOrdenarList)))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(btnProxDado)
                .addGap(43, 43, 43)
                .addComponent(btnAtualizarSituacaoDaLista)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(campoData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(campoHorario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(campoComboBoxLuzDaSala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(64, 64, 64)
                                .addComponent(jLabel4))
                            .addComponent(campoComboBoxVentilador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(campoComboBoxTv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(campoComboBoxLuzDoQuarto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botaoAdd)
                            .addComponent(btnMostrarDados))
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnExcluirTodos)
                            .addComponent(botaoOrdenarList)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProxDado)
                    .addComponent(btnAtualizarSituacaoDaLista))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAddActionPerformed
        dadosCalendar = pegarDadosDosCamposCalendar();
        determinarProximoDadoASerExecutadoInserindo(dadosCalendar);
//        int mes = dadosCalendar.getDataHorario().get(Calendar.MONTH) + 1;
//        System.out.println("DATA: "+dadosCalendar.getDataHorario().get(Calendar.DATE)+"/"+ mes
//        +"/"+dadosCalendar.getDataHorario().get(Calendar.YEAR));
//        System.out.println("HORA: "+dadosCalendar.getDataHorario().get(Calendar.HOUR)+":"+ dadosCalendar.getDataHorario().get(Calendar.MINUTE));
//        agendamento(dadosCalendar);

//        determinarProximoDadoASerExecutado(dadosCalendar);
//        String mesagem = dadosParaLista();
//        dlm.addElement(mesagem);
//        listaDeTarefas.setModel(dlm);
    }//GEN-LAST:event_botaoAddActionPerformed

    private void btnExcluirTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirTodosActionPerformed
        dadosCalendar = pegarDadosDosCamposCalendar();
//        inserirDadosNoSerializable(dadosCalendar);
    }//GEN-LAST:event_btnExcluirTodosActionPerformed

    private void btnMostrarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarDadosActionPerformed
        List<DadosCalendar> dados = new ArrayList<DadosCalendar>();
        dados = buscarDadosNoSerializable();
        for (DadosCalendar dado : dados) {
            escreverDadosNoConsole(dado);
        }
    }//GEN-LAST:event_btnMostrarDadosActionPerformed

    private void botaoOrdenarListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoOrdenarListActionPerformed
//        try {
//            listaDadosSerializados = listaOrdenada(serializador.buscarListaDeDados());
//        } catch (IOException ex) {
//            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (NullPointerException ex) {
//            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        System.out.println("################################################################");
//        for (DadosCalendar listaDadosSerializado : listaDadosSerializados) {
//            escreverDadosNoConsole(listaDadosSerializado);
//        }
    }//GEN-LAST:event_botaoOrdenarListActionPerformed

    private void btnProxDadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProxDadoActionPerformed

    }//GEN-LAST:event_btnProxDadoActionPerformed

    private void btnAtualizarSituacaoDaListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarSituacaoDaListaActionPerformed
        alterarSituacaoDaLista();
    }//GEN-LAST:event_btnAtualizarSituacaoDaListaActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaDeTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaDeTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaDeTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaDeTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaDeTest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAdd;
    private javax.swing.JButton botaoOrdenarList;
    private javax.swing.JButton btnAtualizarSituacaoDaLista;
    private javax.swing.JButton btnExcluirTodos;
    private javax.swing.JButton btnMostrarDados;
    private javax.swing.JButton btnProxDado;
    private javax.swing.JComboBox campoComboBoxLuzDaSala;
    private javax.swing.JComboBox campoComboBoxLuzDoQuarto;
    private javax.swing.JComboBox campoComboBoxTv;
    private javax.swing.JComboBox campoComboBoxVentilador;
    private javax.swing.JTextField campoData;
    private javax.swing.JTextField campoHorario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList listaDeTarefas;
    // End of variables declaration//GEN-END:variables

    
    public void iniciarListaLocal(){
        String data1 = "10/06/2018";
        String horario1 = "10:00";
        DadosCalendar d1 = new DadosCalendar();
        d1.setId(1);
        d1.setAgendamento(new ArrayList<DadosCalendar>());
        d1.setDataHorario(gerenciadorCalendar.atulizarCalendario(data1, horario1));
        d1.setLuzDaSala("L");
        d1.setLuzDoQuarto("D");
        d1.setTv("L");
        d1.setVentilador("L");
        
        String data2 = "01/10/2050";
        String horario2 = "22:00";
        DadosCalendar d2 = new DadosCalendar();
        d2.setId(2);
        d2.setAgendamento(new ArrayList<DadosCalendar>());
        d2.setDataHorario(gerenciadorCalendar.atulizarCalendario(data2, horario2));
        d2.setLuzDaSala("D");
        d2.setLuzDoQuarto("L");
        d2.setTv("D");
        d2.setVentilador("L");
        
        String data3 = "10/05/2018";
        String horario3 = "00:00";
        DadosCalendar d3 = new DadosCalendar();
        d3.setId(3);
        d3.setAgendamento(new ArrayList<DadosCalendar>());
        d3.setDataHorario(gerenciadorCalendar.atulizarCalendario(data3, horario3));
        d3.setLuzDaSala("D");
        d3.setLuzDoQuarto("D");
        d3.setTv("D");
        d3.setVentilador("D");
        
        String data4 = "15/06/2018";
        String horario4 = "05:00";
        DadosCalendar d4 = new DadosCalendar();
        d4.setId(4);
        d4.setAgendamento(new ArrayList<DadosCalendar>());
        d4.setDataHorario(gerenciadorCalendar.atulizarCalendario(data4, horario4));
        d4.setLuzDaSala("L");
        d4.setLuzDoQuarto("L");
        d4.setTv("L");
        d4.setVentilador("D");
        
        listaLocal.add(d1);
        listaLocal.add(d2);
        listaLocal.add(d3);
        listaLocal.add(d4);
        
        
    }
    
    
    /**
     * Método pegarDadosDosCamposCalendar(). Pegos todos os dados dos campos e
     * coloco em o objeto do tipo DadosCalendar e retorno esse objeto.
     *
     * @return
     */
    public DadosCalendar pegarDadosDosCamposCalendar() {
        DadosCalendar dado = new DadosCalendar();

        dado.setAgendamento(new ArrayList<DadosCalendar>());

        dado.setDataHorario(gerenciadorCalendar.atulizarCalendario(campoData.getText(), campoHorario.getText()));

        dado.setLuzDaSala(String.valueOf(campoComboBoxLuzDaSala.getSelectedItem()));
        dado.setLuzDoQuarto(String.valueOf(campoComboBoxLuzDoQuarto.getSelectedItem()));
        dado.setTv(String.valueOf(campoComboBoxTv.getSelectedItem()));
        dado.setVentilador(String.valueOf(campoComboBoxVentilador.getSelectedItem()));

        if (dado.getDataHorario().compareTo(Calendar.getInstance()) < 0) {
            dado.setSituacao("P");
        }
        if (dado.getDataHorario().compareTo(Calendar.getInstance()) > 0) {
            dado.setSituacao("F");
        }

        return dado;

    }

    /**
     * Método inserirDadosNoSerializable(). Responsável por pegar um
     * DadosCalendar e inserir na lista serializada.
     *
     * @param dado
     */
    public void inserirDadosNoSerializable(DadosCalendar dado) {
        try {
            serializador.gravarDados(dado);

        } catch (IOException ex) {
            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Método agendamento(). Responsável por agendar uma ação, esse agendamento
     * é feito a partir do objeto DadosCalendar (recibo entre parametros) com os
     * métodos getDataHorario().getTime(), esse método retorna um objeto do tipo
     * Date para o agendamento.
     *
     * @param d
     */
    public void agendamento(DadosCalendar d) {
        System.out.println("ESTOU NO AGENDAMENTO!!!!");
        Timer t = new Timer(true);

        t.schedule(new TimerTask() {

            @Override
            public void run() {
                JOptionPane.showMessageDialog(null, "CHEGOU HORÁRIO!!!!");
                determinarProximoDadoASerExecutadoInserindo(d);
            }
        }, d.getDataHorario().getTime());
    }

    /**
     * Método escreverDadosNoConsole(). Pega um objeto DadosCalendar e escreve
     * no console os valores dos seus atributos.
     *
     * @param dados
     */
    public void escreverDadosNoConsole(DadosCalendar dados) {

        System.out.println("### ID #####   Data e Horário   ###### Ventilador ##### Luz da Sala ##### Tv ###### Luz do Quarto ##### Situação ####");
        System.out.println("     " + dados.getId() + "   " + dados.getDataHorario().getTime() + "      "
                + dados.getVentilador() + "               " + dados.getLuzDaSala() + "             " + dados.getTv() + "             "
                + dados.getLuzDoQuarto() + "                  " + dados.getSituacao());
    }

    /**
     * Método buscarDadosNoSerializable(). Responsável por busca a lista de
     * dados serializados e retorna-lo.
     *
     * @return
     */
    public List<DadosCalendar> buscarDadosNoSerializable() {
        try {
            listaDadosSerializados = serializador.buscarListaDeDados();
        } catch (IOException ex) {
            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
        }

        return listaDadosSerializados;
    }

    /**
     * Método listaOrdenada(). Responsável por buscar a lista no serializable e
     * ordena-la e retornar a mesma ordenada.
     *
     * @return
     */
    public List<DadosCalendar> listaOrdenada(List<DadosCalendar> list) {

        list = gerenciadorCalendar.ordenarDadosPorDataHoriario(list);
        return list;
    }

    /**
     * Método determinarProximoDadoASerExecutado(). Responsável por receber um
     * objeto do Tipo DadosCalendar. Ele busca a lista de dados serializados,
     * pega o objeto recebido no parâmetro e adiciona na lista, em seguida ele.
     *
     * @param dados
     */
    public void determinarProximoDadoASerExecutadoInserindo(DadosCalendar dados) {
        System.out.println("ESTOU NO determinarProximoDadoASerExecutadoInserindo");
        System.out.println("######################################################################");//tenho que tira depois
//        try {
            if (dados != proxDado) {// quando recebemos um dados e ele for diferente que proxDado quer dizer que ele é um NOVO dado INSERIDO pelo usuario.
                alterarSituacao(dados);// Verificamos se a data e hora do dado é já aconteceu ou não.
//                listaDadosSerializados = buscarDadosNoSerializable(); // buscamos a lista de dados no Serializable.
//                listaDadosSerializados.add(dados); // adicionamos o novo dados na lista.
                listaLocal.add(dados);
//                listaDadosSerializados = listaOrdenada(listaDadosSerializados);// ordemos a lista após adicionarmos o novo dados
                listaLocal = listaOrdenada(listaLocal);
//                colocarIdNosDados(listaDadosSerializados);// colocamos id's na lista toda.
                colocarIdNosDados(listaLocal);
//                serializador.gravarUmaListaDeDados(listaDadosSerializados);// gravamos a lista no Serializable.

            } else {
                alterarSituacao(proxDado);//depois que executou o proxDado sua situação deve ser alterada. 
                alterarESalvarDadosNoSerializable(proxDado);// depois da alteração da situação do proxDado devemos altera-lo no Serializable.
//                listaDadosSerializados = buscarDadosNoSerializable();
                

            }
//            for (DadosCalendar list : listaDadosSerializados) {
//                if (list.getSituacao().equals("F")) {// procuramos na lista o dados mais próximo a acontecer.
//                    proxDado = list;
//                    break;
//                }
//            }
            for (DadosCalendar list : listaLocal) {
                if (list.getSituacao().equals("F")) {// procuramos na lista o dados mais próximo a acontecer.
                    proxDado = list;
                    break;
                }
            }
            thread.stop();// tenho que parar a trhead que estava executando anterior para que não tenha varias thread's funcionando na media que forem passando os agendamentos
            threadDoAgendamento(proxDado);//após receber ou alterar o proxDado devemos mata a outra thread (fizemos na linha anterior) e iniciar uma nova thread passando o proxDado atualizado.
            System.out.println("&&&&&&&&&&&&&& PRÓXIMO DADO A EXECUTAR É &&&&&&&&&&&&&&&&&");
            escreverDadosNoConsole(proxDado);
            System.out.println("######################################################################");//tenho que tira depois
//        } catch (IOException ex) {
//            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (NullPointerException ex) {
//            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    /**
     * Método colocarIdNosDados(). Reponsável por receber uma lista do tipo
     * DadosCalendar no ele coloca os id's na sequencia correta de 1 até n,
     * sendo n a quantidade máxima de dados da lista.
     *
     * @param list
     */
    public void colocarIdNosDados(List<DadosCalendar> list) {
        int c = 10000 + list.size();
        for (int i = 1; i <= list.size(); i++) {
            if (list.get(i - 1).getSituacao().equals("P")) {
                list.get(i - 1).setId(c + i);
                c++;
            } else {
                list.get(i - 1).setId(i);
            }
        }

    }

    /**
     * Método alterarSituacao(). Esse método recebe um objeto do tipo
     * DadosCalendar, onde o tributo dataHorario é comparado com a data e hora
     * atual, se o resultado dessa comparação for menor que ZERRO o atributo
     * situacao do objeto recebe P (de PASSADO) pq a data ou hora já se
     * passaram, se for maior ZERO então o atributo recebe F (de FUTURO) pq a
     * data ou horário ainda não aconteceram.
     *
     * @param d
     */
    public void alterarSituacao(DadosCalendar d) {
        if (d.getDataHorario().compareTo(Calendar.getInstance()) < 0) {
            d.setSituacao("P");
        }
        if (d.getDataHorario().compareTo(Calendar.getInstance()) > 0) {
            d.setSituacao("F");
        }
    }

    public void alterarESalvarDadosNoSerializable(DadosCalendar d) {
//        List<DadosCalendar> da = buscarDadosNoSerializable();
        List<DadosCalendar> da = listaLocal;
//        serializador.inicializarAgendamento(da);
        for (int i = 0; i < da.size(); i++) {
            if (da.get(i).getId() == d.getId()) {
                da.get(i).setDataHorario(d.getDataHorario());
                da.get(i).setLuzDaSala(d.getLuzDaSala());
                da.get(i).setLuzDoQuarto(d.getLuzDoQuarto());
                da.get(i).setSituacao(d.getSituacao());
                da.get(i).setTv(d.getTv());
                da.get(i).setVentilador(d.getVentilador());
            }
        }
//        try {
            da = listaOrdenada(da);
//            serializador.gravarUmaListaDeDados(da);
            listaLocal = da;
//        } catch (IOException ex) {
//            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    /**
     * Método alterarSituacaoDaLista(). É método auxilizar, não será usado na
     * aplicaçao pois em nenhum momento iremos atualizar de a situação de todos
     * os dados de uma só vez.
     */
    public void alterarSituacaoDaLista() {
//        List<DadosCalendar> das = buscarDadosNoSerializable();
//        serializador.inicializarAgendamento(das);
        List<DadosCalendar> das = listaLocal;
        for (DadosCalendar da : das) {
            alterarSituacao(da);
        }
//        try {
//            serializador.gravarUmaListaDeDados(das);
            System.out.println("TODAS AS SITUAÇÕES FORAM ALTERADAS!!!!!!!!!!");
//        } catch (IOException ex) {
//            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    /**
     * Método excluirDadosNoSerializable(). Responsável por excluir um dado da
     * lista a partir de inteiro recebido entre parâmetros.
     *
     * @param id
     */
    public void excluirDadosNoSerializable(int id) { // esse método não foi testado
        List<DadosCalendar> das = new ArrayList<DadosCalendar>();
        serializador.inicializarAgendamento(das);
        listaDadosSerializados = buscarDadosNoSerializable();
        for (DadosCalendar da : listaDadosSerializados) {
            if (da.getId() != id) {
                das.add(da);
            }
        }
        try {
            serializador.gravarUmaListaDeDados(das);
        } catch (IOException ex) {
            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * Método pegarDadosParaIniciarPrograma(). Responsável por toda vez que
     * iniciar o programa ele buscará o próximo dado a ser executado e colocar
     * na variável proxDados. Esse método será chamado dentro construtor dessa
     * classe.
     *
     * @return
     */
    public DadosCalendar pegarDadosParaIniciarPrograma() {
//        listaDadosSerializados = buscarDadosNoSerializable();
        DadosCalendar dado = null;
//        for (DadosCalendar list : listaDadosSerializados) {
//            if (list.getSituacao().equals("F")) {// procuramos na lista o dados mais próximo a acontecer.
//                dado = list;
//                break;
//            }
//        }
        for (DadosCalendar list : listaLocal) {
            if (list.getSituacao().equals("F")) {// procuramos na lista o dados mais próximo a acontecer.
                dado = list;
                break;
            }
        }
        System.out.println("&&&&&&&&&&&&&& PRÓXIMO DADO A EXECUTAR É &&&&&&&&&&&&&&&&&");
        escreverDadosNoConsole(dado);
        System.out.println("######################################################################");//tenho que tira depois

        return dado;
    }

    /**
     * Método threadDoAgendamento(). Responsável por ficar escutando o
     * agendamento.
     *
     * @param d
     */
    public void threadDoAgendamento(DadosCalendar d) {
        thread = new Thread(new Runnable() {

            @Override
            public void run() {
                agendamento(d);
                System.out.println("Estou na thread!!!!!");
            }
        });
        thread.start();
    }

    public void mandarDadosParaWeb(List<DadosCalendar> dados) {
        DadosCalendar dado = new DadosCalendar();
        dado.setAgendamento(dados);
        session.getAsyncRemote().sendText(gson.toJson(dado));
    }
    
    public static void chegouAgendamento(DadosCalendar d){
        
    }
//    

    private void conectarComWebSocket() {
        WebSocketContainer webSocketContainer = ContainerProvider.getWebSocketContainer(); //conseguimos instanciar um com ContainerProvider.getWebSocketContainer()
        try {
            session = webSocketContainer.connectToServer(JanelaDeTest.MyEndpoint.class,
                    URI.create("ws://controlecasaifms.herokuapp.com/teste/websocket"));
            System.out.println("Conectado com WebSocket");
        } catch (DeploymentException | IOException ex) {
            System.out.println(ex);
        }
    }
//    

    @ClientEndpoint
    public static class MyEndpoint {// nesse caso é melhor que a classe 
        
        @OnMessage
        public void onMessage(String message, Session session) { // toda vez que chegar uma msg do servidor isso será executado
            // mesagem vai vim na String message 

            DadosCalendar d = gson.fromJson(message, DadosCalendar.class);// vai transformar a msg que vem do servidor em um Obj do tipo Mesagem
            
            if (d.getHorarioServidor() != null) {// ignora se for horário do servidor.
                return;
            }

            if (d.getAgendamento() != null) {//agnora se a lista de agendamento se for diferente de null
                return;
            }

            if (d.getId() == 0) {
                d.setDataHorario(new GerenciadorCalendar().atulizarCalendario(d.getData(), d.getHorario()));//atualizando Calendar
//                try {
                    d.setAgendamento(new ArrayList<DadosCalendar>());
//                    new SerializacaoCalendar().gravarDados(d);
                   JanelaDeTest.listaLocal.add(d);
                   System.out.println("CHEGOU UM NOVO AGENDAMENTO");
//                } catch (IOException ex) {
//                    Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
//                } catch (NullPointerException ex) {
//                    Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
//                } catch (ClassNotFoundException ex) {
//                    Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
//                }
            } else {
                // IMPLEMENTAR PARA CASO DE EDIÇÃO.
            }
        }
    }

    /**
     * PERGUNTAS: 1. Como devo mandar os dados, um a um ou mando todos juntos em
     * uma List. 2.
     */
    
}
