/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iot;

import br.ifms.tsi.iot.util.RXTX;
import com.google.gson.Gson;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.websocket.Session;
import javax.websocket.ClientEndpoint;
import javax.websocket.ContainerProvider;
import javax.websocket.DeploymentException;
import javax.websocket.OnMessage;
import javax.websocket.Session;
import javax.websocket.WebSocketContainer;
import java.net.URI;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author cesar
 */
public class JanelaDeTeste2 extends javax.swing.JFrame {

    /**
     * listaLocal. Variável responsável por guardar o dados enquando meu
     * programa estiver executando.
     */
    static List<DadosCalendar> listaLocal;

    DefaultListModel dlm;

    SerializacaoCalendar serializador;
    List<DadosCalendar> listaDadosSerializados;
    DadosCalendar dadosCalendar;
    static DadosCalendar proxDado;
    static GerenciadorCalendar gerenciadorCalendar;
    static Thread thread;
    static RXTX rxtx;

    private static Session session;
    private static Gson gson;

    /**
     * Creates new form JanelaDeTest
     */
    public JanelaDeTeste2() {
        gerenciadorCalendar = new GerenciadorCalendar();
        listaLocal = new ArrayList<DadosCalendar>();
        iniciarListaLocal();
        initComponents();
        dlm = new DefaultListModel();

        serializador = new SerializacaoCalendar();
        listaDadosSerializados = new ArrayList<DadosCalendar>();
        //serializador.inicializarAgendamento(listaDadosSerializados);//verificar depois

        dadosCalendar = new DadosCalendar();
        dadosCalendar.setAgendamento(new ArrayList<DadosCalendar>());
        proxDado = new DadosCalendar();
        proxDado.setAgendamento(new ArrayList<DadosCalendar>());

        gson = new Gson();
//        conectarComWebSocket();
        alterarSituacaoDaLista();
        proxDado = pegarDadosParaIniciarPrograma();
        threadDoAgendamento(proxDado);
//        conectarComArduino();// Somente quando estiver com o arduino conectado
        
        addWindowListener(new WindowListener() {
            @Override
            public void windowClosing(WindowEvent e) {
                
            }

            @Override
            public void windowOpened(WindowEvent e) {
                
            }

            @Override
            public void windowClosed(WindowEvent e) {
                
            }

            @Override
            public void windowIconified(WindowEvent e) {
                
            }

            @Override
            public void windowDeiconified(WindowEvent e) {
                
            }

            @Override
            public void windowActivated(WindowEvent e) {
                
            }

            @Override
            public void windowDeactivated(WindowEvent e) {
               
            }

        });
    }

    private void conectarComArduino() {
        try {
            rxtx = new RXTX(RXTX.listarPortasSeriais().get(0), 9600);
            JOptionPane.showMessageDialog(null, "CONECTOU COM O ARDUINO");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "ERRO:" + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        campoData = new javax.swing.JFormattedTextField((mascara("##/##/####")));
        campoHorario = new javax.swing.JFormattedTextField((mascara("##:##")));
        campoComboBoxLuzDaSala = new javax.swing.JComboBox();
        campoComboBoxVentilador = new javax.swing.JComboBox();
        campoComboBoxTv = new javax.swing.JComboBox();
        campoComboBoxLuzDoQuarto = new javax.swing.JComboBox();
        botaoAdd = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnAtualizar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jButton3 = new javax.swing.JButton();
        btnMostrarDados = new javax.swing.JButton();
        btnExcluirTodos = new javax.swing.JButton();
        botaoOrdenarList = new javax.swing.JButton();
        btnProxDado = new javax.swing.JButton();
        btnAtualizarSituacaoDaLista = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        campoId = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setText("DATA");

        jLabel2.setText("HORÁRIO");

        jLabel3.setText("LUZ DA SALA");

        jLabel4.setText("VENTILADOR");

        jLabel5.setText("TV");

        jLabel6.setText("LULZ DO QUARTO");

        campoComboBoxLuzDaSala.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "L", "D" }));

        campoComboBoxVentilador.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "L", "D" }));

        campoComboBoxTv.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "L", "D" }));

        campoComboBoxLuzDoQuarto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "L", "D" }));

        botaoAdd.setText("ADD");
        botaoAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAddActionPerformed(evt);
            }
        });

        btnAtualizar.setText("ATUALIZAR");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        jButton2.setText("IMPRIMIR LISTA");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("TRANSFORMAR EM MILISSEGUNDOS");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jToggleButton2.setText("TRANSFORMAR EM DATE");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("EXCLUIR DADOS PASSADOS");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(btnAtualizar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jToggleButton1)
                            .addComponent(jButton2))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jToggleButton2)
                        .addGap(187, 187, 187))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(278, 278, 278))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton2)
                    .addComponent(jToggleButton1))
                .addGap(76, 76, 76)
                .addComponent(btnAtualizar)
                .addGap(11, 11, 11)
                .addComponent(jButton3)
                .addGap(83, 83, 83)
                .addComponent(jButton2)
                .addContainerGap(161, Short.MAX_VALUE))
        );

        btnMostrarDados.setText("MOSTRAR DADOS SALVOS");
        btnMostrarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarDadosActionPerformed(evt);
            }
        });

        btnExcluirTodos.setText("ENVIAR PARA SERVIDOR");
        btnExcluirTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirTodosActionPerformed(evt);
            }
        });

        botaoOrdenarList.setText("ORDENAR LISTA");
        botaoOrdenarList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoOrdenarListActionPerformed(evt);
            }
        });

        btnProxDado.setText("MOSTRAR PROXIMO A EXECUTAR");
        btnProxDado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProxDadoActionPerformed(evt);
            }
        });

        btnAtualizarSituacaoDaLista.setText("ATUALIZAR SITUAÇÃO DA LISTA");
        btnAtualizarSituacaoDaLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarSituacaoDaListaActionPerformed(evt);
            }
        });

        jButton1.setText("ARDUINO");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setText("ID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(botaoAdd)
                                        .addGap(41, 41, 41)
                                        .addComponent(btnMostrarDados))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(campoComboBoxLuzDoQuarto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(67, 67, 67)
                                        .addComponent(jButton1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(campoComboBoxTv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(campoComboBoxVentilador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(campoComboBoxLuzDaSala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnExcluirTodos)
                                .addGap(68, 68, 68)
                                .addComponent(botaoOrdenarList)))
                        .addGap(36, 36, 36))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(campoHorario, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(campoData, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(campoId, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)))
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(btnProxDado)
                .addGap(43, 43, 43)
                .addComponent(btnAtualizarSituacaoDaLista)
                .addContainerGap(620, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(campoId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(campoData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(campoHorario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(campoComboBoxLuzDaSala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(64, 64, 64)
                                .addComponent(jLabel4))
                            .addComponent(campoComboBoxVentilador, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(campoComboBoxTv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(campoComboBoxLuzDoQuarto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botaoAdd)
                            .addComponent(btnMostrarDados))
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnExcluirTodos)
                            .addComponent(botaoOrdenarList)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProxDado)
                    .addComponent(btnAtualizarSituacaoDaLista))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAddActionPerformed
        dadosCalendar = pegarDadosDosCamposCalendar();
        dadosCalendar.setOperacao("INSERT");
        determinarProximoDadoASerExecutadoInserindo(dadosCalendar);
//        int mes = dadosCalendar.getDataHorario().get(Calendar.MONTH) + 1;
//        System.out.println("DATA: "+dadosCalendar.getDataHorario().get(Calendar.DATE)+"/"+ mes
//        +"/"+dadosCalendar.getDataHorario().get(Calendar.YEAR));
//        System.out.println("HORA: "+dadosCalendar.getDataHorario().get(Calendar.HOUR)+":"+ dadosCalendar.getDataHorario().get(Calendar.MINUTE));
//        agendamento(dadosCalendar);

//        determinarProximoDadoASerExecutado(dadosCalendar);
//        String mesagem = dadosParaLista();
//        dlm.addElement(mesagem);
//        listaDeTarefas.setModel(dlm);
    }//GEN-LAST:event_botaoAddActionPerformed

    private void btnExcluirTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirTodosActionPerformed
        mandarDadosParaWeb(listaLocal);
    }//GEN-LAST:event_btnExcluirTodosActionPerformed

    public void deletarOsDadosPassados(List<DadosCalendar> dados){
        List<DadosCalendar> list = new ArrayList<DadosCalendar>();
        for (DadosCalendar d : dados) {
            if(d.getSituacao().equals("F")){
                list.add(d);
            }  
        }
        listaLocal = list;
    }
    
    private void btnMostrarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarDadosActionPerformed
        List<DadosCalendar> dados = new ArrayList<DadosCalendar>();
        dados = buscarDadosNoSerializable();
        for (DadosCalendar dado : dados) {
            escreverDadosNoConsole(dado);
        }
    }//GEN-LAST:event_btnMostrarDadosActionPerformed

    private void botaoOrdenarListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoOrdenarListActionPerformed
        System.out.println("LISTA ANTES DA ORDENAÇÃO!!!!!!");
        for (DadosCalendar l : listaLocal) {
            escreverDadosNoConsole(l);
            System.out.println("##############################################################################################");
        }
        List<DadosCalendar> ll = listaOrdenada(listaLocal);
        System.out.println("");
        System.out.println("LISTA DEPOIS DA ORDENAÇÃO!!!!!!");
        for (DadosCalendar l: ll) {
            escreverDadosNoConsole(l);
            System.out.println("##############################################################################################");
        }
    }//GEN-LAST:event_botaoOrdenarListActionPerformed

    private void btnProxDadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProxDadoActionPerformed

    }//GEN-LAST:event_btnProxDadoActionPerformed

    private void btnAtualizarSituacaoDaListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarSituacaoDaListaActionPerformed
        alterarSituacaoDaLista();
    }//GEN-LAST:event_btnAtualizarSituacaoDaListaActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        try {
//            rxtx.enviarDados(proxDado.getLuzDoQuarto());
//        } catch (IOException ex) {
//            System.out.println("ERRO: "+ex.getMessage());
//        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        DadosCalendar d = new DadosCalendar();
        d = pegarDadosDosCamposCalendar();
        d.setId(Integer.parseInt(campoId.getText()));
        updateDados(d);
        JOptionPane.showMessageDialog(null, "DADOS "+d.getId()+" ATUALIZADO COM SUCESSO!!!");
        
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        for (DadosCalendar l : listaLocal) {
            System.out.println("########################");
            escreverDadosNoConsole(l);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        for (DadosCalendar l : listaLocal) {
            l = gerenciadorCalendar.atualizarDataHorarioParaServidor(l);
            
        }
        System.out.println("TRASFORMADO COM SUCESSO!!!!");
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        for (DadosCalendar l : listaLocal) {
            
        }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        deletarOsDadosPassados(listaLocal);
        System.out.println("#########################  DADOS EXCLUÍDOS COM SUCESSO ###############################################");
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaDeTeste2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaDeTeste2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaDeTeste2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaDeTeste2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaDeTeste2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAdd;
    private javax.swing.JButton botaoOrdenarList;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnAtualizarSituacaoDaLista;
    private javax.swing.JButton btnExcluirTodos;
    private javax.swing.JButton btnMostrarDados;
    private javax.swing.JButton btnProxDado;
    private javax.swing.JComboBox campoComboBoxLuzDaSala;
    private javax.swing.JComboBox campoComboBoxLuzDoQuarto;
    private javax.swing.JComboBox campoComboBoxTv;
    private javax.swing.JComboBox campoComboBoxVentilador;
    private javax.swing.JTextField campoData;
    private javax.swing.JTextField campoHorario;
    private javax.swing.JTextField campoId;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    // End of variables declaration//GEN-END:variables

    public void iniciarListaLocal() {
        String data1 = "10/06/2018";
        String horario1 = "10:00";
        DadosCalendar d1 = new DadosCalendar();
        d1.setId(1);
        d1.setAgendamento(new ArrayList<DadosCalendar>());
        d1.setDataHorario(gerenciadorCalendar.atulizarCalendario(data1, horario1));
        d1.setLuzDaSala("L");
        d1.setLuzDoQuarto("D");
        d1.setTv("L");
        d1.setVentilador("L");
        d1.setOperacao("NADA");

        String data2 = "01/10/2050";
        String horario2 = "22:00";
        DadosCalendar d2 = new DadosCalendar();
        d2.setId(2);
        d2.setAgendamento(new ArrayList<DadosCalendar>());
        d2.setDataHorario(gerenciadorCalendar.atulizarCalendario(data2, horario2));
        d2.setLuzDaSala("D");
        d2.setLuzDoQuarto("L");
        d2.setTv("D");
        d2.setVentilador("L");
        d2.setOperacao("NADA");

        String data3 = "10/05/2018";
        String horario3 = "00:00";
        DadosCalendar d3 = new DadosCalendar();
        d3.setId(3);
        d3.setAgendamento(new ArrayList<DadosCalendar>());
        d3.setDataHorario(gerenciadorCalendar.atulizarCalendario(data3, horario3));
        d3.setLuzDaSala("D");
        d3.setLuzDoQuarto("D");
        d3.setTv("D");
        d3.setVentilador("D");
        d3.setOperacao("NADA");
        
        String data4 = "15/06/2018";
        String horario4 = "05:00";
        DadosCalendar d4 = new DadosCalendar();
        d4.setId(4);
        d4.setAgendamento(new ArrayList<DadosCalendar>());
        d4.setDataHorario(gerenciadorCalendar.atulizarCalendario(data4, horario4));
        d4.setLuzDaSala("L");
        d4.setLuzDoQuarto("L");
        d4.setTv("L");
        d4.setVentilador("D");
        d4.setOperacao("NADA");

        listaLocal.add(d1);
        listaLocal.add(d2);
        listaLocal.add(d3);
        listaLocal.add(d4);

    }

    /**
     * Método pegarDadosDosCamposCalendar(). Pegos todos os dados dos campos e
     * coloco em o objeto do tipo DadosCalendar e retorno esse objeto.
     *
     * @return
     */
    public DadosCalendar pegarDadosDosCamposCalendar() {
        DadosCalendar dado = new DadosCalendar();

        dado.setAgendamento(new ArrayList<DadosCalendar>());

        dado.setDataHorario(gerenciadorCalendar.atulizarCalendario(campoData.getText(), campoHorario.getText()));

        dado.setLuzDaSala(String.valueOf(campoComboBoxLuzDaSala.getSelectedItem()));
        dado.setLuzDoQuarto(String.valueOf(campoComboBoxLuzDoQuarto.getSelectedItem()));
        dado.setTv(String.valueOf(campoComboBoxTv.getSelectedItem()));
        dado.setVentilador(String.valueOf(campoComboBoxVentilador.getSelectedItem()));

        if (dado.getDataHorario().compareTo(Calendar.getInstance()) < 0) {
            dado.setSituacao("P");
        }
        if (dado.getDataHorario().compareTo(Calendar.getInstance()) > 0) {
            dado.setSituacao("F");
        }

        return dado;

    }

    /**
     * Método inserirDadosNoSerializable(). Responsável por pegar um
     * DadosCalendar e inserir na lista serializada.
     *
     * @param dado
     */
    public void inserirDadosNoSerializable(DadosCalendar dado) {
        try {
            serializador.gravarDados(dado);

        } catch (IOException ex) {
            Logger.getLogger(JanelaDeTeste2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            Logger.getLogger(JanelaDeTeste2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JanelaDeTeste2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Método agendamento(). Responsável por agendar uma ação, esse agendamento
     * é feito a partir do objeto DadosCalendar (recibo entre parametros) com os
     * métodos getDataHorario().getTime(), esse método retorna um objeto do tipo
     * Date para o agendamento.
     *
     * @param d
     */
    public static void agendamento(DadosCalendar d) {
        System.out.println("ESTOU NO AGENDAMENTO!!!!");
        Timer t = new Timer(true);

        t.schedule(new TimerTask() {

            @Override
            public void run() {
//                try {
//                    rxtx.enviarDados(proxDado.getLuzDoQuarto());
//                } catch (IOException ex) {
//                    Logger.getLogger(JanelaUtualizada.class.getName()).log(Level.SEVERE, null, ex);
//                }
                JOptionPane.showMessageDialog(null, "CHEGOU HORÁRIO!!!!");
                determinarProximoDadoASerExecutadoInserindo(d);
            }
        }, d.getDataHorario().getTime());
    }

    /**
     * Método escreverDadosNoConsole(). Pega um objeto DadosCalendar e escreve
     * no console os valores dos seus atributos.
     *
     * @param dados
     */
    public static void escreverDadosNoConsole(DadosCalendar dados) {

        System.out.println("### ID #####   Data e Horário   ###### Ventilador ##### Luz da Sala ##### Tv ###### Luz do Quarto ##### Situação ####");
        System.out.println("     " + dados.getId() + "   " + dados.getDataHorario().getTime() + "      "
                + dados.getVentilador() + "               " + dados.getLuzDaSala() + "             " + dados.getTv() + "             "
                + dados.getLuzDoQuarto() + "                  " + dados.getSituacao());
    }

    /**
     * Método buscarDadosNoSerializable(). Responsável por busca a lista de
     * dados serializados e retorna-lo.
     *
     * @return
     */
    public List<DadosCalendar> buscarDadosNoSerializable() {
        try {
            listaDadosSerializados = serializador.buscarListaDeDados();
        } catch (IOException ex) {
            Logger.getLogger(JanelaDeTeste2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JanelaDeTeste2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            Logger.getLogger(JanelaDeTeste2.class.getName()).log(Level.SEVERE, null, ex);
        }

        return listaDadosSerializados;
    }

    /**
     * Método listaOrdenada(). Responsável por buscar a lista no serializable e
     * ordena-la e retornar a mesma ordenada.
     *
     * @return
     */
    public static List<DadosCalendar> listaOrdenada(List<DadosCalendar> list) {

        list = gerenciadorCalendar.ordenarDadosPorDataHoriario(list);
        return list;
    }

    /**
     * Método determinarProximoDadoASerExecutado(). Responsável por receber um
     * objeto do Tipo DadosCalendar. Ele busca a lista de dados serializados,
     * pega o objeto recebido no parâmetro e adiciona na lista, em seguida ele.
     *
     * @param d
     */
    public static void determinarProximoDadoASerExecutadoInserindo(DadosCalendar d) {
        System.out.println("ESTOU NO determinarProximoDadoASerExecutadoInserindo");
        System.out.println("######################################################################");//tenho que tira depois

        if (d == proxDado && !d.getOperacao().equals("DELETE")) {//quer dizer que chegou o horário     && !d.getOperacao().equals("UPDATE")
            alterarSituacao(proxDado);//depois que executou o proxDado sua situação deve ser alterada. 
            proxDado.setOperacao("A");
//            updateDados(proxDado);// depois da alteração da situação do proxDado devemos altera-lo no Serializable.
        }

        if (d.getOperacao().equals("INSERT")) {// quando recebemos um dados e ele for diferente que proxDado quer dizer que ele é um NOVO dado INSERIDO pelo usuario.
            alterarSituacao(d);// Verificamos se a data e hora do dado é já aconteceu ou não.
            listaLocal.add(d);
            listaLocal = listaOrdenada(listaLocal);
            colocarIdNosDados(listaLocal);

        }

        if (d.getOperacao().equals("UPDATE")) {
            d.setOperacao(null);
            alterarSituacao(d);
            updateDados(d);
            colocarIdNosDados(listaLocal);
        }
        for (DadosCalendar list : listaLocal) {
            if (list.getSituacao().equals("F")) {// procuramos na lista o dados mais próximo a acontecer.
                proxDado = list;
                break;
            }
        }
        thread.stop();// tenho que parar a trhead que estava executando anterior para que não tenha varias thread's funcionando na media que forem passando os agendamentos
        threadDoAgendamento(proxDado);//após receber ou alterar o proxDado devemos mata a outra thread (fizemos na linha anterior) e iniciar uma nova thread passando o proxDado atualizado.
//        mandarDadosParaWeb(listaLocal);
        System.out.println("&&&&&&&&&&&&&& PRÓXIMO DADO A EXECUTAR É &&&&&&&&&&&&&&&&&");
        escreverDadosNoConsole(proxDado);
        System.out.println("######################################################################");//tenho que tira depois
//        } catch (IOException ex) {
//            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (NullPointerException ex) {
//            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    /**
     * Método colocarIdNosDados(). Reponsável por receber uma lista do tipo
     * DadosCalendar no ele coloca os id's na sequencia correta de 1 até n,
     * sendo n a quantidade máxima de dados da lista.
     *
     * @param list
     */
    public static void colocarIdNosDados(List<DadosCalendar> list) {
        int c = 10000 + list.size();
        for (int i = 1; i <= list.size(); i++) {
            if (list.get(i - 1).getSituacao().equals("P")) {
                if (list.get(i - 1).getId() == 1111111111) {//para garantir que 1111111111 seja novos dados vindo do servidor
                    list.get(i - 1).setId(i++);
                } else {
                    list.get(i - 1).setId(c + i);
                    c++;
                }
            } else {
                if (list.get(i - 1).getId() == 1111111111) {//para garantir que 1111111111 seja novos dados vindo do servidor
                    list.get(i - 1).setId(i++);
                } else {
                    list.get(i - 1).setId(i);
                }
            }
        }

    }

    /**
     * Método alterarSituacao(). Esse método recebe um objeto do tipo
     * DadosCalendar, onde o tributo dataHorario é comparado com a data e hora
     * atual, se o resultado dessa comparação for menor que ZERRO o atributo
     * situacao do objeto recebe P (de PASSADO) pq a data ou hora já se
     * passaram, se for maior ZERO então o atributo recebe F (de FUTURO) pq a
     * data ou horário ainda não aconteceram.
     *
     * @param d
     */
    public static void alterarSituacao(DadosCalendar d) {
        if (d.getDataHorario().compareTo(Calendar.getInstance()) < 0) {
            d.setSituacao("P");
        }
        if (d.getDataHorario().compareTo(Calendar.getInstance()) > 0) {
            d.setSituacao("F");
        }
    }

    public static void updateDados(DadosCalendar d) {
        List<DadosCalendar> da = listaLocal;
        for (int i = 0; i < da.size(); i++) {
            if (da.get(i).getId() == d.getId()) {
                da.get(i).setDataHorario(d.getDataHorario());
                da.get(i).setLuzDaSala(d.getLuzDaSala());
                da.get(i).setLuzDoQuarto(d.getLuzDoQuarto());
                da.get(i).setSituacao(d.getSituacao());
                da.get(i).setTv(d.getTv());
                da.get(i).setVentilador(d.getVentilador());
                break;
            }
        }
        //tenho que chamar o determinar
        da = listaOrdenada(da);
        listaLocal = da;
    }

    /**
     * Método alterarSituacaoDaLista(). É método auxilizar, não será usado na
     * aplicaçao pois em nenhum momento iremos atualizar de a situação de todos
     * os dados de uma só vez.
     */
    public void alterarSituacaoDaLista() {
//        List<DadosCalendar> das = buscarDadosNoSerializable();
//        serializador.inicializarAgendamento(das);
        List<DadosCalendar> das = listaLocal;
        for (DadosCalendar da : das) {
            alterarSituacao(da);
        }
//        try {
//            serializador.gravarUmaListaDeDados(das);
        System.out.println("TODAS AS SITUAÇÕES FORAM ALTERADAS!!!!!!!!!!");
//        } catch (IOException ex) {
//            Logger.getLogger(JanelaDeTest.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    /**
     * Método pegarDadosParaIniciarPrograma(). Responsável por toda vez que
     * iniciar o programa ele buscará o próximo dado a ser executado e colocar
     * na variável proxDados. Esse método será chamado dentro construtor dessa
     * classe.
     *
     * @return
     */
    public DadosCalendar pegarDadosParaIniciarPrograma() {
//        listaDadosSerializados = buscarDadosNoSerializable();
        DadosCalendar dado = null;
//        for (DadosCalendar list : listaDadosSerializados) {
//            if (list.getSituacao().equals("F")) {// procuramos na lista o dados mais próximo a acontecer.
//                dado = list;
//                break;
//            }
//        }
        for (DadosCalendar list : listaLocal) {
            if (list.getSituacao().equals("F")) {// procuramos na lista o dados mais próximo a acontecer.
                dado = list;
                break;
            }
        }
        System.out.println("&&&&&&&&&&&&&& PRÓXIMO DADO A EXECUTAR É &&&&&&&&&&&&&&&&&");
        escreverDadosNoConsole(dado);
        System.out.println("######################################################################");//tenho que tira depois

        return dado;
    }

    /**
     * Método threadDoAgendamento(). Responsável por ficar escutando o
     * agendamento.
     *
     * @param d
     */
    public static void threadDoAgendamento(DadosCalendar d) {
        thread = new Thread(new Runnable() {

            @Override
            public void run() {
                agendamento(d);
                System.out.println("Estou na thread!!!!!");
            }
        });
        thread.start();
    }

    public static void chegouNovoAgendamento(DadosCalendar d) {
        System.out.println("########## CHEGOU !!!!!!!!!!!!!! ################");
        escreverDadosNoConsole(d);
        determinarProximoDadoASerExecutadoInserindo(d);
    }

    public static void deleteOuUpdate(DadosCalendar d) {
        if (d.getOperacao().equals("DELETE")) {
            deleteDados(d.getId());

        }

        if (d.getOperacao().equals("UPDATE")) {
            determinarProximoDadoASerExecutadoInserindo(d);

        }
    }

    /**
     * Método deleteDados. Responsável por excluir um dado da lista a partir de
     * inteiro recebido entre parâmetros.
     *
     * @param id
     */
    public static void deleteDados(int id) { // esse método não foi testado
        System.out.println("LISTA ANTES DE DELETAR");
        

        List<DadosCalendar> das = new ArrayList<DadosCalendar>();
        for (DadosCalendar da : listaLocal) {
            if (da.getId() != id) {
                das.add(da);
            }
        }
        listaLocal = listaOrdenada(das);

        System.out.println("LISTA DELETADA");
        for (DadosCalendar d : listaLocal) {
            escreverDadosNoConsole(d);
        }
        for (DadosCalendar list : listaLocal) {
            if (list.getSituacao().equals("F")) {// procuramos na lista o dados mais próximo a acontecer.
                proxDado = list;
                proxDado.setOperacao("A");
                break;
            }
        }
        determinarProximoDadoASerExecutadoInserindo(proxDado);
    }

    public static void mandarDadosParaWeb(List<DadosCalendar> dados) {
        for (DadosCalendar d : dados) {
            d = gerenciadorCalendar.atualizarDataHorarioParaServidor(d); 
            
        }
        DadosCalendar dado = new DadosCalendar();
        dado.setAgendamento(dados);
        dado.setSolicitacao("JA MANDEI");
        session.getAsyncRemote().sendText(gson.toJson(dado));
    }

    /**
     * buscarUmDadoNaListaLocalParaAtualizar. Método responsável por buscar um
     * dado, através de um inteiro (ID) e retorná-lo
     *
     * @param d
     * @return
     */
    public static DadosCalendar buscarUmDadoNaLista(int id) {
        DadosCalendar d = new DadosCalendar();
        for (DadosCalendar da : listaLocal) {
            if (da.getId() == id) {
                d = da;
                break;
            }
        }
        escreverDadosNoConsole(d);
        return d;
    }
//   
    private MaskFormatter mascara(String mascara) {
        MaskFormatter mask = null;
        try {
            mask = new MaskFormatter(mascara);
        } catch (java.text.ParseException e) {
        }
        return mask;
    }

    private void conectarComWebSocket() {
        WebSocketContainer webSocketContainer = ContainerProvider.getWebSocketContainer(); //conseguimos instanciar um com ContainerProvider.getWebSocketContainer()
        try {
            session = webSocketContainer.connectToServer(JanelaDeTeste2.MyEndpoint.class,
                    URI.create("ws://controlecasaifms.herokuapp.com/teste/websocket"));
            System.out.println("Conectado com WebSocket");
        } catch (DeploymentException | IOException ex) {
            System.out.println(ex);
        }
    }
//    

    @ClientEndpoint
    public static class MyEndpoint {// nesse caso é melhor que a classe 

        @OnMessage
        public void onMessage(String dado, Session session) { // toda vez que chegar uma msg do servidor isso será executado
            // mesagem vai vim na String message 
            System.out.println("DADOS: " + dado);

            DadosCalendar d = gson.fromJson(dado, DadosCalendar.class);// vai transformar a msg que vem do servidor em um Obj do tipo Mesagem
            if (d.getHorarioServidor() != null) {// ignora se for horário do servidor.
                return;
            }
            
            if (d.getHorarioServidor() == null) {// para ele não entrar no próximo if pq quando ele vai pro servidor ele não vai com horário null
                d.setAgendamento(null);
            }
            
            if (d.getAgendamento() != null) {//agnora se a lista de agendamento se for diferente de null
                return;
            }
            
            if (d.getSolicitacao().equals("JA MANDEI")) {
                return;

            }
            
            if (d.getSolicitacao().equals("ENVIA")) {
                JanelaDeTeste2.mandarDadosParaWeb(listaLocal);
                return;

            }
            
            if (d.getId() == 0) {
                d.setAgendamento(new ArrayList<DadosCalendar>());
                d.setId(111111111);//COLOCANDO ID FICTICIOS
                d.setDataHorario(new GerenciadorCalendar().novoAtualizarDataHorarioDoServidor(d));// ATUALIZANDO O CALENDAR
                JanelaDeTeste2.chegouNovoAgendamento(d);
                System.out.println("CHEGOU UM NOVO AGENDAMENTO");

            } 
            
            if(d.getId() > 0){
//                está faltando verifica a data e horar quando estiver vindo Do servidor
                d.setAgendamento(new ArrayList<DadosCalendar>());
                d.setDataHorario(new GerenciadorCalendar().novoAtualizarDataHorarioDoServidor(d));// ATUALIZANDO O CALENDAR
                JanelaDeTeste2.deleteOuUpdate(d);

            }
            
            
        }
    }
}
